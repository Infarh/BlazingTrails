@page "/search/{SearchTerm}"
@* @page "/search/{SearchTerm}/MaxLength/{MaxLength:int}" *@

@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Search Trails - Blazing Trails</PageTitle>

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a href="/">Home</a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">Search</li>
    </ol>
</nav>

<h3 class="mt-5 mb-4">Search result for "@SearchTerm"</h3>
<SearchFilter SearchTerm="@SearchTerm" MaxLength="@MaxLength" MaxTime="@MaxTime"/>

@if (_SearchResult is null)
{
    <p>Loading search result...</p>
}
else
{
    <TrailDetails Trail="_SelectedTrail"/>

    <div class="grid">
        @foreach (var trail in _SearchResult)
        {
            <TrailCard Trail="trail" OnSelected="t => _SelectedTrail = t"/>
        }
    </div>
}

@code
{
    private IEnumerable<Trail> _CachedSearchResults = Enumerable.Empty<Trail>();

    private IEnumerable<Trail>? _SearchResult;

    private Trail? _SelectedTrail;

    [Parameter] public string SearchTerm { get; set; } = null!;

    [Parameter, SupplyParameterFromQuery] public int? MaxLength { get; set; }

    [Parameter, SupplyParameterFromQuery] public int? MaxTime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        try
        {
            var all_trails = await Http.GetFromJsonAsync<IEnumerable<Trail>>("trails/trail-data.json");

            _SearchResult = all_trails!.Where(t => 
                t.Name.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase) ||
                t.Location.Contains(SearchTerm, StringComparison.CurrentCultureIgnoreCase));

            _CachedSearchResults = _SearchResult;
        }
        catch (HttpRequestException error)
        {
            Console.WriteLine($"There was a problem loading trail data {error.Message}");
        }
    }

    protected override void OnParametersSet() => UpdateFilters();

    private void UpdateFilters()
    {
        if (!_CachedSearchResults.Any()) return;

        var filters = new List<Func<Trail, bool>>();

        if (MaxLength is { } max_length and > 0)
            filters.Add(t => t.Length <= max_length);

        if(MaxTime is { } max_time and > 0)
            filters.Add(t => t.TimeInMinutes <= max_time * 60);

        _SearchResult = filters.Count > 0
            ? _CachedSearchResults.Where(trail => filters.All(filter => filter(trail)))
            : _CachedSearchResults;
    }
}
